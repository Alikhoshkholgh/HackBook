
------------- register status: 

		+ info registers

		+ info all-registers 


------------ read range of address:

		+ $pc  --> program counter
		+ $sp  --> stack pointer
		+ $fp  --> current stack-frame
		+ $ps  --> processor status

	+ Example:

		+ p/x $pc 		#print the program counter in hex 
		+ x/i $pc		#print the instruction to be executed next



------------ read stack:

		+ info frame 		#show stack frame info 

		+ x/x $esp 

		+ x/<some-number>x $esp 

		


------------ breakPoint: 

		+ b main 			# breakpoint at the begining of the main function

		+ b program_name.c:10		# breakpoint at the 10th line of the program-name.c script


------------ print: 

		+ p &<variable-name> 		#prints the address of the variable

		+ p $sp				#prints the address of the stack-pointer

		+ disassemble			#disassemble a specified section of memory

		+ frme 				#prints a stack frame
	
		+ info frame

		+ info line

		+ show disassemble-next-line
		


------------ walkthrough:

		+ continue: to another breakPoint 
		+ f : to end of function
		+ si: one instruction
		+ s: to the next line of code
		+ ni: one instruction
		



--------------------------------------- notes:



    b main - Puts a breakpoint at the beginning of the program

    b - Puts a breakpoint at the current line

    b N - Puts a breakpoint at line N

    b +N - Puts a breakpoint N lines down from the current line

    b fn - Puts a breakpoint at the beginning of function "fn"

    d N - Deletes breakpoint number N

    info break - list breakpoints

    r - Runs the program until a breakpoint or error

    c - Continues running the program until the next breakpoint or error

    f - Runs until the current function is finished

    s - Runs the next line of the program

    s N - Runs the next N lines of the program

    n - Like s, but it does not step into functions

    u N - Runs until you get N lines in front of the current line

    p var - Prints the current value of the variable "var"

    bt - Prints a stack trace

    u - Goes up a level in the stack

    d - Goes down a level in the stack

    q - Quits gdb



--------------------------------------- notes:

watch x == 3

    Sets a watchpoint, which pauses the program when a condition changes (when x == 3 changes). Watchpoints are great for certain inputs (myPtr != NULL) without having to break on every function call.



--------------------------------------- notes:
delete N

    Deletes breakpoint N (breakpoints are numbered when created).




--------------------------------------- notes:
set x = y

    Sets x to a set value (3) or to another variable (y)



--------------------------------------- notes:
bt

    Backtraces or prints the current function stack to show where you are in the current program. If main calls function a(), which calls b(), which calls c(), the backtrace is

c <= current location 
b 
a 
main 



--------------------------------------- notes:

list
l
list line-number
list function
list -
list start#,end#
list filename:function
disassem
